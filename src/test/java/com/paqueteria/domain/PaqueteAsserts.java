package com.paqueteria.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PaqueteAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaqueteAllPropertiesEquals(Paquete expected, Paquete actual) {
        assertPaqueteAutoGeneratedPropertiesEquals(expected, actual);
        assertPaqueteAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaqueteAllUpdatablePropertiesEquals(Paquete expected, Paquete actual) {
        assertPaqueteUpdatableFieldsEquals(expected, actual);
        assertPaqueteUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaqueteAutoGeneratedPropertiesEquals(Paquete expected, Paquete actual) {
        assertThat(actual)
            .as("Verify Paquete auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaqueteUpdatableFieldsEquals(Paquete expected, Paquete actual) {
        assertThat(actual)
            .as("Verify Paquete relevant properties")
            .satisfies(a -> assertThat(a.getCodigoSeguimiento()).as("check codigoSeguimiento").isEqualTo(expected.getCodigoSeguimiento()))
            .satisfies(a -> assertThat(a.getDescripcion()).as("check descripcion").isEqualTo(expected.getDescripcion()))
            .satisfies(a -> assertThat(a.getDetalle()).as("check detalle").isEqualTo(expected.getDetalle()))
            .satisfies(a -> assertThat(a.getPeso()).as("check peso").isEqualTo(expected.getPeso()))
            .satisfies(a -> assertThat(a.getFechaEnvio()).as("check fechaEnvio").isEqualTo(expected.getFechaEnvio()))
            .satisfies(a ->
                assertThat(a.getFechaEntregaEstimada()).as("check fechaEntregaEstimada").isEqualTo(expected.getFechaEntregaEstimada())
            )
            .satisfies(a -> assertThat(a.getEstado()).as("check estado").isEqualTo(expected.getEstado()))
            .satisfies(a -> assertThat(a.getTipoEntrega()).as("check tipoEntrega").isEqualTo(expected.getTipoEntrega()))
            .satisfies(a -> assertThat(a.getDireccionEntrega()).as("check direccionEntrega").isEqualTo(expected.getDireccionEntrega()))
            .satisfies(a -> assertThat(a.getLatitudEntrega()).as("check latitudEntrega").isEqualTo(expected.getLatitudEntrega()))
            .satisfies(a -> assertThat(a.getLongitudEntrega()).as("check longitudEntrega").isEqualTo(expected.getLongitudEntrega()))
            .satisfies(a -> assertThat(a.getConfirmado()).as("check confirmado").isEqualTo(expected.getConfirmado()))
            .satisfies(a -> assertThat(a.getCodigoQR()).as("check codigoQR").isEqualTo(expected.getCodigoQR()))
            .satisfies(a -> assertThat(a.getUbicacionActual()).as("check ubicacionActual").isEqualTo(expected.getUbicacionActual()))
            .satisfies(a -> assertThat(a.getFragil()).as("check fragil").isEqualTo(expected.getFragil()))
            .satisfies(a -> assertThat(a.getClienteTokenAcceso()).as("check clienteTokenAcceso").isEqualTo(expected.getClienteTokenAcceso())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaqueteUpdatableRelationshipsEquals(Paquete expected, Paquete actual) {
        assertThat(actual)
            .as("Verify Paquete relationships")
            .satisfies(a -> assertThat(a.getRemitente()).as("check remitente").isEqualTo(expected.getRemitente()))
            .satisfies(a -> assertThat(a.getDestinatario()).as("check destinatario").isEqualTo(expected.getDestinatario()))
            .satisfies(a -> assertThat(a.getRuta()).as("check ruta").isEqualTo(expected.getRuta()))
            .satisfies(a -> assertThat(a.getSucursalOrigen()).as("check sucursalOrigen").isEqualTo(expected.getSucursalOrigen()))
            .satisfies(a -> assertThat(a.getSucursalDestino()).as("check sucursalDestino").isEqualTo(expected.getSucursalDestino()));
    }
}
